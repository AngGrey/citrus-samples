<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <artifactId>citrus-camel-bakery</artifactId>
    <groupId>com.consol.citrus.samples</groupId>
    <version>2.4-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <groupId>com.consol.citrus.samples</groupId>
  <artifactId>bakery-report</artifactId>
  <name>bakery-report</name>
  <packaging>war</packaging>

  <dependencies>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-servlet</artifactId>
    </dependency>

    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>

    <dependency>
      <groupId>com.consol.citrus</groupId>
      <artifactId>citrus-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.consol.citrus</groupId>
      <artifactId>citrus-java-dsl</artifactId>
    </dependency>
    <dependency>
      <groupId>com.consol.citrus</groupId>
      <artifactId>citrus-http</artifactId>
    </dependency>
  </dependencies>

  <build>
    <finalName>report</finalName>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <warName>report</warName>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <configuration>
          <webAppConfig>
            <contextPath>/report</contextPath>
          </webAppConfig>
          <httpConnector>
            <port>${report.server.port}</port>
            <idleTimeout>60000</idleTimeout>
          </httpConnector>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.jolokia</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <configuration>
          <watchInterval>500</watchInterval>
          <logDate>default</logDate>
          <verbose>true</verbose>
          <autoPull>always</autoPull>
          <images>
            <!-- Docker images to use -->
            <image>
              <!-- App-Server image -->
              <alias>server</alias>
              <name>consol/${application.server}:latest</name>
              <run>
                <namingStrategy>none</namingStrategy>
                <volumes>
                  <from>
                    <image>application</image>
                  </from>
                </volumes>
                <env>
                  <CATALINA_OPTS>-Xmx64m</CATALINA_OPTS>
                </env>
                <ports>
                  <!-- Port mappings: Container internal port (which must be exposed) will be
                 dynamically mapped and this (random) port will be assigned to the maven variable
                 ${report.server.port}. Multiple port mappings can be specified here-->
                  <port>${report.server.port}:8080</port>
                </ports>
                <wait>
                  <!-- The plugin waits until this URL is reachable via HTTP ... -->
                  <log>Server startup</log>
                  <http>
                    <url>http://localhost:${report.server.port}/report/jolokia</url>
                    <method>GET</method>
                    <status>200</status>
                  </http>
                  <time>60000</time>
                  <shutdown>500</shutdown>
                </wait>
                <log>
                  <enabled>true</enabled>
                  <color>red</color>
                </log>
              </run>
            </image>
            <image>
              <alias>application</alias>
              <!-- Application image -->
              <name>citrus/${project.artifactId}:${project.version}</name>
              <build>
                <tags>
                  <tag>latest</tag>
                </tags>
                <assembly>
                  <descriptorRef>artifact</descriptorRef>
                </assembly>
              </build>
            </image>
          </images>
        </configuration>
      </plugin>
    </plugins>

    <testSourceDirectory>src/citrus/java</testSourceDirectory>
    <testResources>
      <testResource>
        <directory>src/citrus/resources</directory>
        <includes>
          <include>**</include>
        </includes>
        <excludes>
          <exclude>*.java</exclude>
        </excludes>
      </testResource>
      <testResource>
        <directory>src/citrus/tests</directory>
        <includes>
          <include>**/*</include>
        </includes>
      </testResource>
    </testResources>
  </build>

  <profiles>
    <profile>
      <id>docker</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jolokia</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <!-- Connect this plugin to the maven lifecycle around the integration-test phase. I.e. start the container
                 in pre-integration-test and stop it in post-integration-test. -->
            <executions>
              <execution>
                <id>start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>build</goal>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jetty-embedded</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.activemq.tooling</groupId>
            <artifactId>activemq-maven-plugin</artifactId>
            <configuration>
              <fork>true</fork>
            </configuration>
            <executions>
              <execution>
                <id>start-activemq</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <configuration>
              <daemon>false</daemon>
              <reload>manual</reload>
            </configuration>
            <executions>
              <execution>
                <id>start-server</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy-war</goal>
                </goals>
                <configuration>
                  <daemon>true</daemon>
                  <war>
                    ${settings.localRepository}/com/consol/citrus/samples/bakery-report/${project.version}/bakery-report-${project.version}.war
                  </war>
                  <stopPort>9999</stopPort>
                  <stopKey>stopMe</stopKey>
                </configuration>
              </execution>
              <execution>
                <id>stop-server</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <stopPort>9999</stopPort>
                  <stopKey>stopMe</stopKey>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
